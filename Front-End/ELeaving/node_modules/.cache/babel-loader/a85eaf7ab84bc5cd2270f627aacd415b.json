{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { tagPropType } from '../utils/helper.js';\nimport CButton from '../button/CButton';\nimport CLink from '../link/CLink';\nimport { Context } from './CDropdown'; //component - CoreUI / CDropdownToggle\n\nvar CDropdownToggle = function CDropdownToggle(props) {\n  var _togglerAttrs;\n\n  var className = props.className,\n      innerRef = props.innerRef,\n      onClick = props.onClick,\n      caret = props.caret,\n      split = props.split,\n      tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"innerRef\", \"onClick\", \"caret\", \"split\", \"tag\"]);\n\n  var _useContext = useContext(Context),\n      reference = _useContext.reference,\n      setReference = _useContext.setReference,\n      isOpen = _useContext.isOpen,\n      setIsOpen = _useContext.setIsOpen,\n      inNav = _useContext.inNav,\n      setSplit = _useContext.setSplit;\n\n  innerRef && innerRef(reference);\n  useEffect(function () {\n    setSplit(split);\n  });\n\n  var click = function click(e) {\n    if (props.disabled) {\n      return;\n    }\n\n    onClick && onClick(e);\n    setIsOpen(!isOpen);\n  };\n\n  var Tag = tag || (inNav ? CLink : CButton);\n  var classes = classNames(className, {\n    'dropdown-toggle': caret && !split,\n    'nav-link': inNav\n  });\n  var togglerAttrs = (_togglerAttrs = {\n    onClick: click,\n    'aria-expanded': isOpen ? 'true' : 'false',\n    'aria-haspopup': 'true',\n    'aria-label': 'Dropdown toggle'\n  }, _togglerAttrs[\"\" + (tag && typeof tag === 'string' ? 'ref' : 'innerRef')] = setReference, _togglerAttrs['role'] = Tag === CButton ? null : 'button', _togglerAttrs);\n\n  if (split) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CButton, attributes, props.children), /*#__PURE__*/React.createElement(CButton, _extends({\n      className: \"dropdown-toggle dropdown-toggle-split\"\n    }, togglerAttrs, attributes), ''));\n  } else {\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      className: classes\n    }, togglerAttrs, attributes));\n  }\n};\n\nCDropdownToggle.propTypes = {\n  tag: tagPropType,\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  //\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  caret: PropTypes.bool,\n  onClick: PropTypes.func,\n  split: PropTypes.bool,\n  disabled: PropTypes.bool\n};\nCDropdownToggle.defaultProps = {\n  caret: true\n};\nexport default CDropdownToggle;","map":{"version":3,"sources":["C:/Users/iFix/Documents/GitHub/Holidaymanagement1.0/Front-End/ELeaving/node_modules/@coreui/react/es/dropdown/CDropdownToggle.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","useContext","useEffect","PropTypes","classNames","tagPropType","CButton","CLink","Context","CDropdownToggle","props","_togglerAttrs","className","innerRef","onClick","caret","split","tag","attributes","_useContext","reference","setReference","isOpen","setIsOpen","inNav","setSplit","click","e","disabled","Tag","classes","togglerAttrs","createElement","Fragment","children","propTypes","node","oneOfType","string","array","object","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { tagPropType } from '../utils/helper.js';\nimport CButton from '../button/CButton';\nimport CLink from '../link/CLink';\nimport { Context } from './CDropdown'; //component - CoreUI / CDropdownToggle\n\nvar CDropdownToggle = function CDropdownToggle(props) {\n  var _togglerAttrs;\n\n  var className = props.className,\n      innerRef = props.innerRef,\n      onClick = props.onClick,\n      caret = props.caret,\n      split = props.split,\n      tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"innerRef\", \"onClick\", \"caret\", \"split\", \"tag\"]);\n\n  var _useContext = useContext(Context),\n      reference = _useContext.reference,\n      setReference = _useContext.setReference,\n      isOpen = _useContext.isOpen,\n      setIsOpen = _useContext.setIsOpen,\n      inNav = _useContext.inNav,\n      setSplit = _useContext.setSplit;\n\n  innerRef && innerRef(reference);\n  useEffect(function () {\n    setSplit(split);\n  });\n\n  var click = function click(e) {\n    if (props.disabled) {\n      return;\n    }\n\n    onClick && onClick(e);\n    setIsOpen(!isOpen);\n  };\n\n  var Tag = tag || (inNav ? CLink : CButton);\n  var classes = classNames(className, {\n    'dropdown-toggle': caret && !split,\n    'nav-link': inNav\n  });\n  var togglerAttrs = (_togglerAttrs = {\n    onClick: click,\n    'aria-expanded': isOpen ? 'true' : 'false',\n    'aria-haspopup': 'true',\n    'aria-label': 'Dropdown toggle'\n  }, _togglerAttrs[\"\" + (tag && typeof tag === 'string' ? 'ref' : 'innerRef')] = setReference, _togglerAttrs['role'] = Tag === CButton ? null : 'button', _togglerAttrs);\n\n  if (split) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CButton, attributes, props.children), /*#__PURE__*/React.createElement(CButton, _extends({\n      className: \"dropdown-toggle dropdown-toggle-split\"\n    }, togglerAttrs, attributes), ''));\n  } else {\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      className: classes\n    }, togglerAttrs, attributes));\n  }\n};\n\nCDropdownToggle.propTypes = {\n  tag: tagPropType,\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  //\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  caret: PropTypes.bool,\n  onClick: PropTypes.func,\n  split: PropTypes.bool,\n  disabled: PropTypes.bool\n};\nCDropdownToggle.defaultProps = {\n  caret: true\n};\nexport default CDropdownToggle;"]},"metadata":{},"sourceType":"module"}