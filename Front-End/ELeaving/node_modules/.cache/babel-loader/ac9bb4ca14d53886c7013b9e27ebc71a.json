{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CScrollbar from './CScrollbar';\nimport { Context } from './CSidebar'; //component - CoreUI / CSidebarNav\n\nvar CSidebarNav = function CSidebarNav(props) {\n  var className = props.className,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"innerRef\"]);\n\n  var _useContext = useContext(Context),\n      scrollbarExist = _useContext.scrollbarExist;\n\n  var navClasses = classNames('c-sidebar-nav', 'h-100', className); //state\n\n  var isRtl = getComputedStyle(document.querySelector('html')).direction === 'rtl';\n  return /*#__PURE__*/React.createElement(CScrollbar, _extends({\n    settings: {\n      suppressScrollX: !isRtl\n    },\n    className: navClasses,\n    innerRef: innerRef,\n    switcher: scrollbarExist,\n    tag: \"ul\"\n  }, attributes));\n};\n\nCSidebarNav.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  children: PropTypes.node,\n  //\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func])\n};\nexport default CSidebarNav;","map":{"version":3,"sources":["C:/Users/iFix/Documents/GitHub/Holidaymanagement1.0/Front-End/ELeaving/node_modules/@coreui/react/es/template/CSidebarNav.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","useContext","PropTypes","classNames","CScrollbar","Context","CSidebarNav","props","className","innerRef","attributes","_useContext","scrollbarExist","navClasses","isRtl","getComputedStyle","document","querySelector","direction","createElement","settings","suppressScrollX","switcher","tag","propTypes","oneOfType","string","array","object","children","node","func"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB,C,CAAsC;;AAEtC,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC5C,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,UAAU,GAAGX,6BAA6B,CAACQ,KAAD,EAAQ,CAAC,WAAD,EAAc,UAAd,CAAR,CAF9C;;AAIA,MAAII,WAAW,GAAGV,UAAU,CAACI,OAAD,CAA5B;AAAA,MACIO,cAAc,GAAGD,WAAW,CAACC,cADjC;;AAGA,MAAIC,UAAU,GAAGV,UAAU,CAAC,eAAD,EAAkB,OAAlB,EAA2BK,SAA3B,CAA3B,CAR4C,CAQsB;;AAElE,MAAIM,KAAK,GAAGC,gBAAgB,CAACC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAD,CAAhB,CAAiDC,SAAjD,KAA+D,KAA3E;AACA,SAAO,aAAalB,KAAK,CAACmB,aAAN,CAAoBf,UAApB,EAAgCN,QAAQ,CAAC;AAC3DsB,IAAAA,QAAQ,EAAE;AACRC,MAAAA,eAAe,EAAE,CAACP;AADV,KADiD;AAI3DN,IAAAA,SAAS,EAAEK,UAJgD;AAK3DJ,IAAAA,QAAQ,EAAEA,QALiD;AAM3Da,IAAAA,QAAQ,EAAEV,cANiD;AAO3DW,IAAAA,GAAG,EAAE;AAPsD,GAAD,EAQzDb,UARyD,CAAxC,CAApB;AASD,CApBD;;AAsBAJ,WAAW,CAACkB,SAAZ,GAAwB;AACtBhB,EAAAA,SAAS,EAAEN,SAAS,CAACuB,SAAV,CAAoB,CAACvB,SAAS,CAACwB,MAAX,EAAmBxB,SAAS,CAACyB,KAA7B,EAAoCzB,SAAS,CAAC0B,MAA9C,CAApB,CADW;AAEtBC,EAAAA,QAAQ,EAAE3B,SAAS,CAAC4B,IAFE;AAGtB;AACArB,EAAAA,QAAQ,EAAEP,SAAS,CAACuB,SAAV,CAAoB,CAACvB,SAAS,CAAC0B,MAAX,EAAmB1B,SAAS,CAAC6B,IAA7B,CAApB;AAJY,CAAxB;AAMA,eAAezB,WAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport CScrollbar from './CScrollbar';\nimport { Context } from './CSidebar'; //component - CoreUI / CSidebarNav\n\nvar CSidebarNav = function CSidebarNav(props) {\n  var className = props.className,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"innerRef\"]);\n\n  var _useContext = useContext(Context),\n      scrollbarExist = _useContext.scrollbarExist;\n\n  var navClasses = classNames('c-sidebar-nav', 'h-100', className); //state\n\n  var isRtl = getComputedStyle(document.querySelector('html')).direction === 'rtl';\n  return /*#__PURE__*/React.createElement(CScrollbar, _extends({\n    settings: {\n      suppressScrollX: !isRtl\n    },\n    className: navClasses,\n    innerRef: innerRef,\n    switcher: scrollbarExist,\n    tag: \"ul\"\n  }, attributes));\n};\n\nCSidebarNav.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  children: PropTypes.node,\n  //\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func])\n};\nexport default CSidebarNav;"]},"metadata":{},"sourceType":"module"}